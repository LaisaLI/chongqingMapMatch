package grid;

import grid.GpsPoint;


public class JGrid
{
	//´óÍø¸ñ
	public static final int[][] GRIDS = {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424817,424910,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424825,424826,424827,424920,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424834,424835,424836,424837,424930,424931,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424844,424845,424846,424847,424940,424941,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,424652,424653,424654,424655,0,0,0,0,0,0,0,0,0,0,0,0,0,0,424854,424855,424856,424857,424950,424951,424952,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,424662,424663,424664,424665,424666,0,0,0,0,0,0,0,0,0,0,0,0,0,424864,424865,424866,424867,424960,424961,424962,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,424672,424673,424674,424675,424676,0,0,0,0,0,0,0,0,0,0,0,424872,424873,424874,424875,424876,424877,424970,424971,424972,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,434602,434603,434604,434605,434606,434607,0,0,0,0,0,0,0,0,0,0,434802,434803,434804,434805,434806,434807,434900,434901,434902,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,434611,434612,434613,434614,434615,434616,434617,0,434711,434712,0,0,0,0,0,0,0,434812,434813,434814,434815,434816,434817,434910,434911,434912,0,0,0,0,0,0,0},
			{0,0,0,0,0,434527,434620,434621,434622,434623,434624,434625,434626,434627,434720,434721,434722,434723,0,0,0,0,0,0,434822,434823,434824,434825,434826,434827,434920,434921,434922,0,0,0,0,0,0,0},
			{0,0,0,0,434536,434537,434630,434631,434632,434633,434634,434635,434636,434637,434730,434731,434732,434733,0,0,434736,434737,0,0,434832,434833,434834,434835,434836,434837,434930,434931,434932,0,0,0,0,0,0,0},
			{0,0,0,434545,434546,434547,434640,434641,434642,434643,434644,434645,434646,434647,434740,434741,434742,434743,0,0,434746,434747,434840,434841,434842,434843,434844,434845,434846,434847,434940,434941,434942,0,0,0,0,0,0,0},
			{0,0,0,434555,434556,434557,434650,434651,434652,434653,434654,434655,434656,434657,434750,434751,434752,434753,434754,434755,434756,434757,434850,434851,434852,434853,434854,434855,434856,434857,434950,434951,434952,0,0,0,0,0,0,0},
			{0,0,0,434565,434566,434567,434660,434661,434662,434663,434664,434665,434666,434667,434760,434761,434762,434763,434764,434765,434766,434767,434860,434861,434862,434863,434864,434865,434866,434867,434960,434961,0,0,0,0,0,0,0,0},
			{0,434573,434574,434575,434576,434577,434670,434671,434672,434673,434674,434675,434676,434677,434770,434771,434772,434773,434774,434775,434776,434777,434870,434871,434872,434873,434874,434875,434876,434877,434970,434971,0,0,0,0,0,0,0,0},
			{0,444503,444504,444505,444506,444507,444600,444601,444602,444603,444604,444605,444606,444607,444700,444701,444702,444703,444704,444705,444706,444707,444800,444801,444802,444803,444804,444805,444806,444807,444900,0,0,0,0,0,0,0,0,0},
			{444512,444513,444514,444515,444516,444517,444610,444611,444612,444613,444614,444615,444616,444617,444710,444711,444712,444713,444714,444715,444716,444717,444810,444811,444812,444813,444814,444815,444816,444817,0,0,0,0,0,0,0,0,0,0},
			{444522,444523,444524,444525,444526,444527,444620,444621,444622,444623,444624,444625,444626,444627,444720,444721,444722,444723,444724,444725,444726,444727,444820,444821,444822,444823,444824,444825,444826,444827,0,0,0,0,0,0,0,0,0,0},
			{444532,444533,444534,444535,444536,444537,444630,444631,444632,444633,444634,444635,444636,444637,444730,444731,444732,444733,444734,444735,444736,444737,444830,444831,444832,444833,444834,444835,444836,444837,0,0,0,0,0,0,0,0,0,0},
			{0,444543,444544,444545,444546,444547,444640,444641,444642,444643,444644,444645,444646,444647,444740,444741,444742,444743,444744,444745,444746,444747,444840,444841,444842,444843,444844,444845,444846,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,444554,444555,444556,444557,444650,444651,444652,444653,444654,444655,444656,444657,444750,444751,444752,444753,444754,444755,444756,444757,444850,444851,444852,444853,444854,444855,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,444564,444565,444566,444567,444660,444661,444662,444663,444664,444665,444666,444667,444760,444761,444762,444763,444764,444765,444766,444767,444860,444861,444862,444863,444864,444865,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,444575,444576,444577,444670,444671,444672,444673,444674,444675,444676,444677,444770,444771,444772,444773,444774,444775,444776,444777,444870,444871,444872,444873,444874,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,454505,454506,454507,454600,454601,454602,454603,454604,454605,454606,454607,454700,454701,454702,454703,454704,454705,454706,454707,454800,454801,454802,454803,454804,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,454514,454515,454516,454517,454610,454611,454612,454613,454614,454615,0,454617,454710,454711,454712,454713,454714,454715,454716,454717,454810,454811,454812,454813,454814,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,454524,454525,454526,454527,454620,454621,454622,454623,454624,454625,0,0,0,454721,454722,454723,454724,454725,454726,454727,454820,454821,454822,454823,454824,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,454534,454535,454536,454537,454630,454631,0,454633,454634,454635,0,0,0,454731,454732,454733,454734,454735,454736,454737,454830,454831,454832,454833,454834,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,454545,454546,454547,454640,0,0,0,0,0,0,0,0,0,454742,454743,454744,454745,454746,454747,454840,454841,454842,454843,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,454556,0,0,0,0,0,0,0,0,0,0,0,454752,454753,454754,454755,454756,454757,454850,454851,454852,454853,454854,454855,454856,0,0,0,454952,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,454763,454764,454765,454766,454767,454860,454861,454862,454863,454864,454865,454866,454867,454960,454961,454962,454963,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,454773,454774,454775,454776,454777,454870,454871,454872,454873,454874,454875,454876,454877,454970,454971,454972,454973,454974,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464703,464704,464705,464706,464707,464800,464801,464802,464803,464804,464805,464806,464807,464900,464901,464902,464903,464904,464905,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464713,464714,464715,464716,464717,464810,464811,464812,464813,464814,464815,464816,464817,464910,464911,464912,464913,464914,464915,0,0,465010,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464723,464724,464725,464726,464727,464820,464821,464822,464823,464824,464825,464826,464827,464920,464921,464922,464923,464924,464925,464926,464927,465020,465021},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464737,464830,464831,464832,464833,464834,464835,464836,464837,464930,464931,464932,464933,464934,464935,464936,464937,465030,465031},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464747,464840,464841,464842,464843,464844,464845,464846,464847,464940,464941,464942,464943,464944,464945,464946,464947,465040,465041},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464850,464851,464852,464853,464854,464855,464856,464857,464950,464951,464952,464953,464954,464955,464956,464957,465050,465051},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464860,464861,464862,464863,464864,464865,464866,464867,464960,464961,464962,464963,464964,464965,464966,464967,465060,465061},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464870,464871,464872,464873,464874,464875,464876,464877,464970,464971,464972,464973,464974,464975,464976,464977,465070,465071},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474801,474802,474803,474804,474805,474806,474807,474900,474901,474902,474903,474904,474905,474906,474907,475000,475001},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474811,474812,474813,474814,474815,474816,474817,474910,474911,474912,474913,474914,474915,474916,474917,475010,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474821,474822,474823,474824,474825,474826,474827,474920,474921,474922,474923,474924,474925,474926,474927,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474834,474835,474836,474837,474930,474931,474932,474933,474934,474935,474936,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474844,474845,474846,474847,474940,474941,0,474943,474944,474945,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474853,474854,474855,474856,474857,474950,474951,474952,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474862,0,474864,474865,474866,474867,474960,474961,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,474872,474873,474874,474875,474876,474877,474970,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,484802,484803,484804,484805,484806,484807,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,484812,484813,484814,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,484822,484823,484824,0,0,0,0,0,0,0,0,0,0,0,0,0},
	};
	public static final int NUM_OF_SUBMAP = 50;
	public static final int X_NUM_OF_MAP = 40;
	public static final int Y_NUM_OF_MAP = 50;
	public static final double J_START_X = 105.25;
	public static final double J_START_Y = 28.08333;
	public static final double J_MAP_X = 0.125;
	public static final double J_MAP_Y = 0.083336;
	public static final double SUB_MAP_X = J_MAP_X / NUM_OF_SUBMAP;
	public static final double SUB_MAP_Y = J_MAP_Y / NUM_OF_SUBMAP;
	private int mapID;
	private GpsPoint spoint = null;
	private GpsPoint epoint = null;
	
	public JGrid(GpsPoint p)
	{
		int x = (int)((p.getX() - J_START_X) / J_MAP_X);
		int y = (int)((p.getY() - J_START_Y) / J_MAP_Y);
		mapID = GRIDS[y][x];
		if (mapID != 0)
		{
			this.spoint = new GpsPoint(J_START_X + x * J_MAP_X, J_START_Y + y * J_MAP_Y);
			this.epoint = new GpsPoint(J_START_X + (x + 1) * J_MAP_X, J_START_Y + (y + 1) * J_MAP_Y);
		}
		
		
	}
	
	public final int getOff(GpsPoint p, char c)
	{
		int subMapId = this.subMapIdOfPoint(p);
		int X = subMapId % NUM_OF_SUBMAP;
		int Y = subMapId / NUM_OF_SUBMAP;
		if (c == 'X')
		{
			if (p.getX() < spoint.getX() + (X + 0.2) * SUB_MAP_X) return -1;
			if (p.getX() > spoint.getX() + (X + 0.8) * SUB_MAP_X) return 1;
		}
		else if (c == 'Y')
		{
			if (p.getY() < spoint.getY() + (Y + 0.25) * SUB_MAP_Y) return -1;
			if (p.getY() > spoint.getY() + (Y + 0.75) * SUB_MAP_Y) return 1;
		}
		return 0;
	}
	
	
	
	public JGrid(String s, String e, int mid)
	{
    	this.setspoint(s);
    	this.setepoint(e);
    	this.setMapID(mid);
    }
	
	public JGrid() {
		// TODO ×Ô¶¯Éú³ÉµÄ¹¹Ôìº¯Êý´æ¸ù
	}

	public void setspoint(String s){
		this.spoint = new GpsPoint(s);
	}
	public GpsPoint getspoint(){
		return this.spoint;
	}


	public static final int isInMap(GpsPoint p)
	{
		if (p.getX() < J_START_X || p.getY() < J_START_Y ||
				p.getX() > J_START_X + X_NUM_OF_MAP * J_MAP_X || p.getY() > J_START_Y + Y_NUM_OF_MAP * J_MAP_Y)
			return 0;
		int x = (int)((p.getX() - J_START_X) / J_MAP_X);
		int y = (int)((p.getY() - J_START_Y) / J_MAP_Y);
		if (x >= X_NUM_OF_MAP) x = X_NUM_OF_MAP - 1;
		if (y >= Y_NUM_OF_MAP) y = Y_NUM_OF_MAP - 1;
		if (x < 0) x = 0;
		if (y < 0) y = 0;
		return GRIDS[y][x];
	}
	
	public final int subMapIdOfPoint(GpsPoint p)//»ñÈ¡µãËùÔÚµÄÐ¡Íø¸ñ
	{
		int X = (int)((p.getX() - spoint.getX()) / SUB_MAP_X);
		int Y = (int)((p.getY() - spoint.getY()) / SUB_MAP_Y);
		if (X == 50) X = 49;
		if (X == -1) X = 0;
		if (Y == 50) Y = 49;
		if (Y == -1) Y = 0;
		return X + Y * NUM_OF_SUBMAP;
	}
	
	public void setepoint(String s){
		this.epoint = new GpsPoint(s);
	}
	public GpsPoint getepoint(){
		return this.epoint;
	}
	
	public GpsPoint getSubMapSnode(int k)//»ñÈ¡Ð¡Íø¸ñ×óÏÂ½ÇµÄµã
	{
		int X = k % NUM_OF_SUBMAP;
		int Y = k / NUM_OF_SUBMAP;
		return new GpsPoint(spoint.getX() + SUB_MAP_X * X, spoint.getY() + SUB_MAP_Y * Y);
	}
	
	public GpsPoint getSubMapEnode(int k)//»ñÈ¡Ð¡Íø¸ñÓÒÉÏ½ÇµÄµã
	{
		int X = k % NUM_OF_SUBMAP;
		int Y = k / NUM_OF_SUBMAP;
		return new GpsPoint(spoint.getX() + SUB_MAP_X * (X + 1), spoint.getY() + SUB_MAP_Y * (Y + 1));
	}
	
	
	public void setMapID(int mid){
		this.mapID = mid;
	}
	public int getMapID(){
		return this.mapID;
	}
	
	/*protected boolean isCrossSubMap(GpsPoint p1, GpsPoint p2, int subID)
	{
		int posOfPoint1 = subMapIdOfPoint(p1);
		int posOfPoint2 = subMapIdOfPoint(p2);
		int minX = Math.min(posOfPoint1 % NUM_OF_SUBMAP, posOfPoint2 % NUM_OF_SUBMAP);
		int maxX = Math.max(posOfPoint2 % NUM_OF_SUBMAP, posOfPoint1 % NUM_OF_SUBMAP);
		int minY = Math.min(posOfPoint2 / NUM_OF_SUBMAP, posOfPoint1 / NUM_OF_SUBMAP);
		int maxY = Math.max(posOfPoint2 / NUM_OF_SUBMAP, posOfPoint1 / NUM_OF_SUBMAP);
		int X = subID % NUM_OF_SUBMAP;
		int Y = subID / NUM_OF_SUBMAP;
		if (!(minX <= X && X <= maxX && minY <= Y && Y <= maxY)) return false;
		
		return IsCross.isCross(p1, p2, X, Y);
	}
	
	public String toString(){  
	    return this.mapID+":"+this.mapID+"\n"+"ÆðÊ¼¾­¶È£º"+this.spoint.getX()+"\n"+"ÆðÊ¼Î³¶È£º"+this.spoint.getY()+"\n"+"ÖÕÖ¹¾­¶È£º"+this.epoint.getX()+"\n"+"ÖÕÖ¹Î³¶È£º"+this.epoint.getY()+"\n";  
	} */
	
}
